package com.Pidev.Restaurant;

import com.Pidev.Restaurant.Entities.Restaurant;
import com.Pidev.Restaurant.Services.RestaurantService;
import com.Pidev.Restaurant.Utils.Strings;
import com.codename1.components.ImageViewer;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.Image;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.geom.Dimension;
import java.util.ArrayList;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;
    private String filePath;
    ArrayList<Restaurant> restos = new ArrayList<>();

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);
        RestaurantService rs = RestaurantService.getInstance();
        restos = rs.getAllRestaurants();

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        Form hi = new Form("Restaurants", BoxLayout.y());

        Button btnAdd = new Button("Ajouter restaurant");
        btnAdd.addActionListener(e -> {
            Form addPage = new Form("Ajouter Restaurant", BoxLayout.y());

            Label name = new Label("Nom");
            TextField nameInp = new TextField();

            Label adresse = new Label("Adresse");
            TextField adrInp = new TextField();

            Label ville = new Label("Ville");
            TextField villeInp = new TextField();

            Label pays = new Label("Pays");
            TextField paysInp = new TextField();

            Label capacity = new Label("capacité");
            TextField capacityInp = new TextField();

            Button uploadImg = new Button("Selectionner une Image");
            uploadImg.addActionListener(e3 -> {
                Display.getInstance().openGallery(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        if (evt != null && evt.getSource() != null) {
                            filePath = (String) evt.getSource();
                        }
                    }
                }, GALLERY_IMAGE);
            });
            Button addBtn = new Button("Ajouter");
            addBtn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e2) {
                    try {
                        RestaurantService rs = RestaurantService.getInstance();
                        Restaurant r = new Restaurant(Integer.parseInt(capacityInp.getText()), nameInp.getText(), adrInp.getText(), villeInp.getText(), paysInp.getText(), Strings.removePrefix(filePath,"file://"));
                        rs.addRestaurant(r);
                    } catch (Exception e) {
                        Dialog.show("Error", "Error");
                    }
                    Dialog.show("Info", "Utilisateur ajouté avec succéss");
                }
            });
            addPage.addAll(name, nameInp, adresse, adrInp, ville, villeInp, pays, paysInp, capacity, capacityInp, uploadImg, addBtn);
            addPage.show();
        });
        hi.add(btnAdd);
        for (Restaurant resto : restos) {
            try {
                hi.add(addItem(resto));
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        }
        hi.show();
    }

    public Container addItem(Restaurant r) throws IOException {
        Container c1 = new Container(BoxLayout.x());
        String link = "file://" + r.getImage();
        ImageViewer img = new ImageViewer(Image.createImage(link));
        img.setSize(new Dimension(10, 10));
        Label lb = new Label(r.getName() + " " + r.getVille());

        c1.addAll(img, lb);
        Container c2 = new Container(BoxLayout.y());
        c2.addAll(c1);
        return c2;
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
